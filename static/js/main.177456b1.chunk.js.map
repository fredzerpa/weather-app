{"version":3,"sources":["reportWebVitals.js","redux/address/address.types.js","redux/address/address.utils.js","redux/address/address.reducer.js","redux/root-reducer.js","redux/store.js","redux/address/address.selectors.js","API/unsplash/unsplash.api.js","components/timeline-carousel/timeline-carousel.component.js","utils/functions.utils.js","API/open-weather/open-weather.api.js","components/weather-timeline/weather-timeline.component.js","redux/address/address.actions.js","components/forecast-card/forecast-card.component.js","components/forecast-cards-overview/forecast-cards-overview.component.js","API/geoapify/geoapify.api.js","components/searchbar/searchbar.component.js","components/autocomplete-searchbar/autocomplete-searchbar.component.js","components/header/header.component.js","components/footer/footer.component.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddressActionTypes","ADD_ADDRESS_TO_SEARCHED_ADDRESSES","ADD_ADDRESS_TO_FAVORITES","REMOVE_ADDRESS_FROM_FAVORITES","REMOVE_ADDRESS","addNewAddress","addresses","addressToAdd","existingAddress","removeExistingAddress","addressToRemove","filter","address","city","find","INITIAL_STATE","searchedAddresses","favorites","addressReducer","state","action","type","payload","favoritesPersistConfig","key","storage","whitelist","rootReducer","combineReducers","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","selectAddresses","selectSearchedAddresses","createSelector","selectFavoriteAddresses","BASE_URL","INITIAL_CONFIG","backupSearch","backupKeyword","searchPhotosByKeyword","keyword","a","config","axios","method","url","params","query","client_id","env","UNSPLASH_ACCESS_KEY","per_page","orientation","response","data","results","length","useStyles","makeStyles","swiper","width","maxWidth","cursor","backgroundColor","slide","textAlign","fontSize","display","justifyContent","alignItems","TimelineCarousel","children","height","className","props","classes","slidesPerView","style","map","child","i","convertFarenheitToCelcius","temp","capitalizeFirstLetter","first","rest","locale","navigator","language","toLocaleUpperCase","join","getForecast","fiveDaysThreeHours","byCity","cityName","q","appid","WEATHER_API_KEY","units","byCoords","lat","lon","currentWeather","WEATHER_ICONS_MAP","Thunderstorm","default","Drizzle","Rain","Snow","Atmosphere","Clear","day","night","Clouds","getWeatherConditionIcon","condition","code","time","timeOfTheDay","moment","hours","theme","card","borderRadius","color","palette","text","secondary","flexDirection","cardHeader","padding","cardHeaderTitle","fontWeight","cardMedia","cardContent","paddingTop","paddingBottom","cardContentTypography","WeatherTimeline","otherProps","date","Date","dt_txt","Card","CardHeader","title","calendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","CardMedia","alt","image","weather","main","id","CardContent","Grid","container","direction","Typography","align","variant","format","noWrap","Math","round","addAddressToSearchedAddresses","root","maxHeight","margin","breakpoints","up","paddingLeft","paddingRight","cardBgUrl","flexFlow","position","zIndex","backgroundPosition","backgroundImage","backgroundRepeat","backgroundSize","cardOverlay","cardTitle","cardSubtitle","cardHeaderAction","marginRight","favoriteButton","closeButton","cardActions","marginTop","cardActionsTitle","cardActionsIcon","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","collapse","collapseWrapperInner","moreData","moreDataLeftSide","moreDataRightSide","down","timelineCarousel","React","memo","connect","dispatch","addAddressToFavorites","removeAddressFromFavorites","removeAddress","favorite","useState","undefined","forecast","setForecast","expanded","setExpanded","setCardBgUrl","isFavorite","setIsFavorite","todayForecast","useRef","useEffect","current","list","get","country","country_name","imageUrls","maxNumber","floor","random","getRandomNumber","urls","small","wrap","item","xs","sm","md","raised","IconButton","onClick","Favorite","FavoriteBorder","Close","titleTypographyProps","component","subheader","subheaderTypographyProps","CardActions","toLowerCase","country_code","clsx","ExpandMore","Collapse","in","timeout","unmountOnExit","wrapperInner","Paper","elevation","Hidden","xsDown","src","feels_like","wind","speed","humidity","value","mapStateToProps","createStructuredSelector","favoriteAddresses","spacing","idx","lg","place_id","autocompleteAddress","cancelToken","apiKey","GEOAPIFY_API_KEY","limit","token","byState","stateName","byCountry","countryName","searchbar","background","locationIcon","red","getUserGeoLocation","Container","TextField","placeholder","inputProps","autoComplete","InputProps","startAdornment","InputAdornment","disablePointerEvents","SearchOutlined","endAdornment","LocationOn","optionsIcon","optionsWrapper","inputValue","setInputValue","open","setOpen","options","setOptions","loading","fetchOptionsCancelToken","fetchOptions","useMemo","cancel","CancelToken","source","active","newOptions","features","feature","properties","Autocomplete","popupIcon","filterSelectedOptions","onChange","event","newAddress","onInputChange","newInputValue","onOpen","onClose","getOptionLabel","option","toUpperCase","paper","renderInput","renderOption","optionCustomAddress","matches","match","parts","parse","part","index","highlight","formatted","boxShadow","marginBottom","Header","typography","heartIcon","Footer","Link","href","process","target","rel","minHeight","githubCorner","App","bannerColor","octoColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.177456b1.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const AddressActionTypes = {\r\n  ADD_ADDRESS_TO_SEARCHED_ADDRESSES: 'ADD_ADDRESS_TO_SEARCHED_ADDRESSES',\r\n  ADD_ADDRESS_TO_FAVORITES: 'ADD_ADDRESS_TO_FAVORITES',\r\n  REMOVE_ADDRESS_FROM_FAVORITES: 'REMOVE_ADDRESS_FROM_FAVORITES',\r\n  REMOVE_ADDRESS: 'REMOVE_ADDRESS',\r\n};\r\n\r\nexport default AddressActionTypes;\r\n","export const addNewAddress = (addresses, addressToAdd) => {\r\n  if (existingAddress(addresses, addressToAdd)) {\r\n    return addresses;\r\n  }\r\n\r\n  return [...addresses, addressToAdd];\r\n};\r\n\r\nexport const removeExistingAddress = (addresses, addressToRemove) =>\r\n  addresses.filter(address => address.city !== addressToRemove.city);\r\n\r\nexport const existingAddress = (addresses, addressToAdd) =>\r\n  addresses.find(address => address.city === addressToAdd.city);\r\n","import AddressActionTypes from './address.types';\r\nimport {\r\n  addNewAddress,\r\n  existingAddress,\r\n  removeExistingAddress,\r\n} from './address.utils';\r\n\r\nconst INITIAL_STATE = {\r\n  searchedAddresses: [],\r\n  favorites: [],\r\n};\r\n\r\nconst addressReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case AddressActionTypes.ADD_ADDRESS_TO_SEARCHED_ADDRESSES:\r\n      return {\r\n        ...state,\r\n        favorites: state.favorites,\r\n        searchedAddresses: existingAddress(state.favorites, action.payload)\r\n          ? state.searchedAddresses\r\n          : addNewAddress(state.searchedAddresses, action.payload),\r\n      };\r\n\r\n    case AddressActionTypes.ADD_ADDRESS_TO_FAVORITES:\r\n      return {\r\n        ...state,\r\n        searchedAddresses: removeExistingAddress(\r\n          state.searchedAddresses,\r\n          action.payload\r\n        ),\r\n        favorites: addNewAddress(state.favorites, action.payload),\r\n      };\r\n\r\n    case AddressActionTypes.REMOVE_ADDRESS_FROM_FAVORITES:\r\n      return {\r\n        ...state,\r\n        searchedAddresses: addNewAddress(\r\n          state.searchedAddresses,\r\n          action.payload\r\n        ),\r\n        favorites: removeExistingAddress(state.favorites, action.payload),\r\n      };\r\n\r\n    case AddressActionTypes.REMOVE_ADDRESS:\r\n      return {\r\n        ...state,\r\n        searchedAddresses: removeExistingAddress(\r\n          state.searchedAddresses,\r\n          action.payload\r\n        ),\r\n        favorites: removeExistingAddress(state.favorites, action.payload),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default addressReducer;\r\n","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport addressReducer from './address/address.reducer';\r\n\r\nconst favoritesPersistConfig = {\r\n  key: 'favorites',\r\n  storage,\r\n  whitelist: ['favorites'],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  addresses: persistReducer(favoritesPersistConfig, addressReducer),\r\n});\r\n\r\nexport default rootReducer;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport { persistStore } from 'redux-persist';\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewares = [];\r\nif (process.env.NODE_ENV === 'development') {\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store);\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectAddresses = state => state.addresses;\r\n\r\nexport const selectSearchedAddresses = createSelector(\r\n  [selectAddresses],\r\n  addresses => addresses.searchedAddresses\r\n);\r\n\r\nexport const selectFavoriteAddresses = createSelector(\r\n  [selectAddresses],\r\n  addresses => addresses.favorites\r\n)\r\n","// * Libraries\r\n// + Axios\r\nimport axios from 'axios';\r\n// + Environment Variables\r\nimport env from 'react-dotenv';\r\n\r\nconst BASE_URL = `https://api.unsplash.com`;\r\n\r\nconst INITIAL_CONFIG = {\r\n  backupSearch: false,\r\n  backupKeyword: null,\r\n};\r\n\r\nexport const searchPhotosByKeyword = async (\r\n  keyword,\r\n  config = INITIAL_CONFIG\r\n) => {\r\n  let response;\r\n  try {\r\n    response = await axios({\r\n      method: 'GET',\r\n      url: `${BASE_URL}/search/photos`,\r\n      params: {\r\n        query: keyword,\r\n        client_id: env.UNSPLASH_ACCESS_KEY,\r\n        per_page: '30',\r\n        // Orientation landscape to maximize the opportunity of the photo to be a lanscape\r\n        orientation: 'landscape',\r\n      },\r\n    });\r\n\r\n    // TODO Make a new request over the former if the former response is empty\r\n    if (!response.data.results.length && config.backupSearch) {\r\n      try {\r\n        response = await axios({\r\n          method: 'GET',\r\n          url: `${BASE_URL}/search/photos`,\r\n          params: {\r\n            query: config.backupKeyword,\r\n            client_id: env.UNSPLASH_ACCESS_KEY,\r\n            per_page: '30',\r\n            // Orientation landscape to maximize the opportunity of the photo to be a lanscape\r\n            orientation: 'landscape',\r\n          },\r\n        });\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    }\r\n    return { response };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\n// * Libraries\r\n// + Swiper Carousel\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\n// + Material-UI\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\n// Import Swiper styles\r\nimport 'swiper/swiper.min.css';\r\n\r\nconst useStyles = makeStyles({\r\n  swiper: {\r\n    width: '100%',\r\n    maxWidth: '100%',\r\n    '&:hover': {\r\n      cursor: 'grab',\r\n    },\r\n    '&:active': {\r\n      cursor: 'grabbing',\r\n    },\r\n    // Transparent Bg\r\n    backgroundColor: 'rgba(255,255,255,0)',\r\n  },\r\n  slide: {\r\n    // Original CSS\r\n    textAlign: 'center',\r\n    fontSize: '18px',\r\n\r\n    /* Center slide text vertically */\r\n    display: 'flex',\r\n    '-webkit-box-pack': 'center',\r\n    '-ms-flex-pack': 'center',\r\n    '-webkit-justify-content': 'center',\r\n    justifyContent: 'center',\r\n    '-webkit-box-align': 'center',\r\n    '-ms-flex-align': 'center',\r\n    '-webkit-align-items': 'center',\r\n    alignItems: 'center',\r\n\r\n    // Custom CSS\r\n    width: 'auto',\r\n  },\r\n});\r\n\r\nconst TimelineCarousel = ({\r\n  children,\r\n  height = '100px',\r\n  className,\r\n  ...props\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Swiper\r\n      className={`${classes.swiper} ${className}`}\r\n      slidesPerView={'auto'}\r\n      style={{ height }}\r\n      {...props}\r\n    >\r\n      {children.map((child, i) => (\r\n        <SwiperSlide key={i} className={classes.slide}>\r\n          {child}\r\n        </SwiperSlide>\r\n      ))}\r\n    </Swiper>\r\n  );\r\n};\r\n\r\nexport default TimelineCarousel;\r\n","export const convertFarenheitToCelcius = temp => (temp - 32) * (5 / 9);\r\n\r\nexport const getRandomNumber = (maxNumber = 1) =>\r\n  Math.floor(Math.random() * maxNumber);\r\n\r\nexport const getUserGeoLocation = async () => {\r\n  // ! Is promise function which will return the userLocation\r\n  if (!('geolocation' in navigator)) {\r\n    return 'Geolocation is not available on this device';\r\n  }\r\n  const askUserLocation = () =>\r\n    // * It's a promise so we can get the value in other sections of the code\r\n    new Promise((res, rej) => {\r\n      navigator.geolocation.getCurrentPosition(res, rej);\r\n    });\r\n  const userLocation = await askUserLocation();\r\n  return userLocation;\r\n};\r\n\r\nexport const capitalizeFirstLetter = (\r\n  [first, ...rest],\r\n  locale = navigator.language\r\n) => first.toLocaleUpperCase(locale) + rest.join('');\r\n","// * Libraries\r\n// + Axios\r\nimport axios from 'axios';\r\n// + Moment\r\nimport moment from 'moment';\r\n// + Environment Variables\r\nimport env from 'react-dotenv';\r\n\r\nconst BASE_URL = `https://api.openweathermap.org/data/2.5`;\r\n\r\nexport const getForecast = {\r\n  fiveDaysThreeHours: {\r\n    byCity: async cityName => {\r\n      try {\r\n        const { data } = await axios({\r\n          method: 'GET',\r\n          url: `${BASE_URL}/forecast`,\r\n          params: {\r\n            q: cityName,\r\n            appid: env.WEATHER_API_KEY,\r\n            units: 'imperial',\r\n          },\r\n        });\r\n        return { results: data };\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    },\r\n    byCoords: async ({ lat, lon }) => {\r\n      try {\r\n        const { data } = await axios({\r\n          method: 'GET',\r\n          url: `${BASE_URL}/forecast`,\r\n          params: { lat, lon, appid: env.WEATHER_API_KEY, units: 'imperial' },\r\n        });\r\n        return { results: data };\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    },\r\n  },\r\n  currentWeather: async query => {\r\n    try {\r\n      const { data } = await axios({\r\n        method: 'GET',\r\n        url: `${BASE_URL}/weather`,\r\n        params: { q: query, appid: env.WEATHER_API_KEY, units: 'imperial' },\r\n      });\r\n      return { results: data };\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nconst WEATHER_ICONS_MAP = {\r\n  // -- Group 2xx: Thunderstorm\r\n  Thunderstorm: {\r\n    211: '/assets/weather-icons/thunder.svg', // Thunderstorm without Rain\r\n    default: '/assets/weather-icons/thunder.svg',\r\n  },\r\n  // -- Group 3xx: Drizzle\r\n  Drizzle: {\r\n    default: '/assets/weather-icons/day-rain.svg',\r\n  },\r\n  // -- Group 5xx: Rain\r\n  Rain: {\r\n    default: '/assets/weather-icons/hail.svg',\r\n  },\r\n  // -- Group 6xx: Snow\r\n  Snow: {\r\n    default: '/assets/weather-icons/day-snow.svg',\r\n  },\r\n  // -- Group 7xx: Atmosphere\r\n  Atmosphere: {\r\n    default: null,\r\n  },\r\n  // -- Group 800: Clear\r\n  Clear: {\r\n    800: {\r\n      // Clear\r\n      day: '/assets/weather-icons/day.svg',\r\n      night: '/assets/weather-icons/night.svg',\r\n    },\r\n    default: '/assets/weather-icons/day.svg',\r\n  },\r\n  // -- Group 80x: Clouds\r\n  Clouds: {\r\n    801: {\r\n      // Few clouds\r\n      day: '/assets/weather-icons/day-cloudy.svg',\r\n      night: '/assets/weather-icons/night-cloudy.svg',\r\n    },\r\n    default: '/assets/weather-icons/cloudy.svg',\r\n  },\r\n};\r\n\r\nexport const getWeatherConditionIcon = (condition, code, time) => {\r\n  const timeOfTheDay =\r\n    6 <= moment(time).hours() && moment(time).hours() <= 19 ? 'day' : 'night';\r\n\r\n  const iconLink = WEATHER_ICONS_MAP[condition][code]\r\n    ? WEATHER_ICONS_MAP[condition][code][timeOfTheDay]\r\n    : WEATHER_ICONS_MAP[condition][code] ??\r\n      WEATHER_ICONS_MAP[condition].default;\r\n\r\n  return iconLink;\r\n};\r\n","import React from 'react';\r\n\r\n// * Libraries\r\n// + Material-UI\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardMedia,\r\n  Grid,\r\n  makeStyles,\r\n  Typography,\r\n} from '@material-ui/core';\r\n\r\n// + MomentJs\r\nimport moment from 'moment';\r\n\r\n// * Config\r\n// + Utils\r\nimport { convertFarenheitToCelcius } from '../../utils/functions.utils';\r\nimport { getWeatherConditionIcon } from '../../API/open-weather/open-weather.api';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    // padding: theme.spacing(1),\r\n    borderRadius: '0',\r\n    width: '85px',\r\n    height: '100%',\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    // Transparent bg\r\n    backgroundColor: 'rgba(255,255,255,0)',\r\n  },\r\n  cardHeader: {\r\n    padding: '0',\r\n  },\r\n  cardHeaderTitle: {\r\n    fontSize: '.8rem',\r\n    fontWeight: 'bold',\r\n  },\r\n  cardMedia: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: 'calc(100% - 45px)', // 45px from the Card Content Height\r\n    width: '100%',\r\n  },\r\n  cardContent: {\r\n    padding: '8px',\r\n    height: '45px',\r\n    // Override CSS\r\n    '&:last-child': {\r\n      paddingTop: '0',\r\n      paddingBottom: '0',\r\n    },\r\n  },\r\n  cardContentTypography: {\r\n    fontSize: '0.7rem',\r\n  },\r\n}));\r\n\r\nconst WeatherTimeline = ({ data, className, ...otherProps }) => {\r\n  const classes = useStyles();\r\n\r\n  const date = new Date(data.dt_txt);\r\n\r\n  return (\r\n    <Card className={`${classes.card} ${className ?? ''}`} {...otherProps}>\r\n      {/* Card Header */}\r\n      <CardHeader\r\n        title={moment(date).calendar(null, {\r\n          sameDay: '[Today]',\r\n          nextDay: '[Tomorrow]',\r\n          nextWeek: 'dddd',\r\n          lastDay: '[Yesterday]',\r\n          lastWeek: '[Last] dddd',\r\n          sameElse: 'DD/MM/YYYY',\r\n        })}\r\n        classes={{\r\n          title: classes.cardHeaderTitle,\r\n        }}\r\n        className={classes.cardHeader}\r\n      />\r\n      {/* Card Image */}\r\n      <CardMedia\r\n        className={classes.cardMedia}\r\n        alt='img'\r\n        image={getWeatherConditionIcon(\r\n          data.weather[0].main,\r\n          data.weather[0].id,\r\n          data.dt_txt\r\n        )}\r\n      />\r\n      {/* Card Body */}\r\n      <CardContent className={classes.cardContent}>\r\n        <Grid\r\n          container\r\n          direction='column'\r\n          justifyContent='flex-end'\r\n          alignItems='center'\r\n          style={{ height: '100%' }}\r\n        >\r\n          <Typography\r\n            align='center'\r\n            variant='button'\r\n            className={classes.cardContentTypography}\r\n          >\r\n            {moment(date).format('h:mm a')}\r\n          </Typography>\r\n          <Typography\r\n            align='center'\r\n            variant='button'\r\n            className={classes.cardContentTypography}\r\n            noWrap\r\n          >\r\n            {Math.round(convertFarenheitToCelcius(data.main.temp))}℃ |{' '}\r\n            {Math.round(data.main.temp)}℉\r\n          </Typography>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherTimeline;\r\n","import AddressActionTypes from './address.types';\r\n\r\nexport const addAddressToSearchedAddresses = address => ({\r\n  type: AddressActionTypes.ADD_ADDRESS_TO_SEARCHED_ADDRESSES,\r\n  payload: address,\r\n});\r\n\r\nexport const addAddressToFavorites = address => ({\r\n  type: AddressActionTypes.ADD_ADDRESS_TO_FAVORITES,\r\n  payload: address,\r\n});\r\n\r\nexport const removeAddressFromFavorites = address => ({\r\n  type: AddressActionTypes.REMOVE_ADDRESS_FROM_FAVORITES,\r\n  payload: address,\r\n});\r\n\r\nexport const removeAddress = address => ({\r\n  type: AddressActionTypes.REMOVE_ADDRESS,\r\n  payload: address,\r\n});\r\n","import React, { useEffect } from 'react';\r\n\r\n// * Libraries\r\n// + Material-UI Library\r\nimport Collapse from '@mui/material/Collapse'; // Material-UI v5\r\nimport {\r\n  makeStyles,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Grid,\r\n  Paper,\r\n  Hidden,\r\n  Typography,\r\n  IconButton,\r\n  CardActions,\r\n} from '@material-ui/core'; // Material-UI v4\r\n// + Material-UI Icons\r\nimport {\r\n  Close,\r\n  ExpandMore,\r\n  Favorite,\r\n  FavoriteBorder,\r\n} from '@material-ui/icons';\r\n// + CLSX for Classes Construct\r\nimport clsx from 'clsx';\r\n// + MomentJs\r\nimport moment from 'moment';\r\n\r\n// * API\r\n// + Unsplash\r\nimport { searchPhotosByKeyword } from '../../API/unsplash/unsplash.api';\r\nimport TimelineCarousel from '../timeline-carousel/timeline-carousel.component';\r\nimport WeatherTimeline from '../weather-timeline/weather-timeline.component';\r\n\r\n// * Utils\r\n// + Functions\r\nimport {\r\n  capitalizeFirstLetter,\r\n  convertFarenheitToCelcius,\r\n  getRandomNumber,\r\n} from '../../utils/functions.utils';\r\nimport {\r\n  getForecast,\r\n  getWeatherConditionIcon,\r\n} from '../../API/open-weather/open-weather.api';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  addAddressToFavorites,\r\n  removeAddress,\r\n  removeAddressFromFavorites,\r\n} from '../../redux/address/address.actions';\r\n\r\n// -- Material-UI Styles\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    height: '375px',\r\n    maxHeight: '250px',\r\n    padding: '0', // Better aesthetic on mobiles\r\n    margin: '1rem 0',\r\n\r\n    // Breakpoints\r\n    [theme.breakpoints.up('md')]: {\r\n      paddingLeft: '.5rem',\r\n      paddingRight: '.5rem',\r\n    },\r\n  },\r\n  card: ({ cardBgUrl }) => ({\r\n    display: 'flex',\r\n    flexFlow: 'column wrap',\r\n    width: '100%',\r\n    height: '100%',\r\n    position: 'relative',\r\n    zIndex: '2', // Be higher layered than moreData\r\n    // Image API Background\r\n    backgroundPosition: 'center',\r\n    backgroundImage: `url(${cardBgUrl})`,\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundSize: 'cover',\r\n  }),\r\n  cardOverlay: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: '100%',\r\n    backgroundColor: 'rgba(0,0,0,0.5)',\r\n    zIndex: '-1', // So it goes behind its adyacent elements\r\n  },\r\n  cardTitle: {\r\n    color: 'white',\r\n    fontSize: '1.75rem',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  cardSubtitle: {\r\n    color: '#d6dbdc',\r\n  },\r\n  cardHeaderAction: {\r\n    height: '100%',\r\n    marginRight: '-5px',\r\n  },\r\n  favoriteButton: {\r\n    padding: '8px',\r\n  },\r\n  closeButton: {\r\n    padding: '8px',\r\n  },\r\n  cardContent: {},\r\n  cardActions: {\r\n    marginTop: 'auto',\r\n    padding: '8px 16px',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n  cardActionsTitle: {\r\n    color: 'whitesmoke',\r\n    fontWeight: '300',\r\n    fontSize: '1.25rem',\r\n  },\r\n  cardActionsIcon: {\r\n    marginRight: '-8px',\r\n  },\r\n  expand: {\r\n    transform: 'rotate(270deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(90deg)',\r\n  },\r\n  collapse: {\r\n    // Utilizing MUI Grid classes instead of a Grid for a better Transition UX\r\n    [theme.breakpoints.up('xs')]: {\r\n      maxWidth: '50%',\r\n    },\r\n    [theme.breakpoints.up('sm')]: {\r\n      maxWidth: 'calc(5*100%/12)',\r\n    },\r\n    [theme.breakpoints.up('md')]: {\r\n      maxWidth: '50%',\r\n    },\r\n    // [theme.breakpoints.up('md')]: {\r\n    //   maxWidth: '50%',\r\n    // },\r\n  },\r\n  collapseWrapperInner: {\r\n    maxWidth: '100%',\r\n  },\r\n  moreData: {\r\n    backgroundColor: 'ghostwhite',\r\n    // backgroundColor: '#f1f1ff',\r\n    // Structure\r\n    width: 'calc(100% + 20px)', // 20px from margin left\r\n    height: 'calc(100% - 8px)', // 8px from margin top & bottom\r\n    padding: 'calc(1rem - 8px) 1rem calc(1rem - 8px) calc(1rem + 20px)', // 8px from magin top-bot & 20px  from the margin left\r\n    margin: '4px 0 4px -20px', // Acentuation to the main data\r\n    zIndex: '1', // Go behind mainData\r\n\r\n    // Layout\r\n    display: 'flex',\r\n    flexFlow: 'column wrap',\r\n  },\r\n  moreDataLeftSide: {},\r\n  moreDataRightSide: {\r\n    height: '100%',\r\n    [theme.breakpoints.down('xs')]: {\r\n      alignItems: 'center',\r\n    },\r\n  },\r\n  timelineCarousel: {\r\n    marginTop: 'auto',\r\n  },\r\n}));\r\n\r\nconst ForecastCard = ({\r\n  address,\r\n  favorite = false,\r\n  addAddressToFavorites,\r\n  removeAddressFromFavorites,\r\n  removeAddress,\r\n}) => {\r\n  const [forecast, setForecast] = React.useState(undefined);\r\n  const [expanded, setExpanded] = React.useState(true);\r\n  const [cardBgUrl, setCardBgUrl] = React.useState('');\r\n  const [isFavorite, setIsFavorite] = React.useState(favorite);\r\n  const todayForecast = React.useRef(undefined);\r\n\r\n  // ! Important: remember passing Object as props for useStyles\r\n  const classes = useStyles({ cardBgUrl }); // Passing the url to Material Styles\r\n\r\n  useEffect(() => {\r\n    // Gets data from Open Weather API using a City as the query\r\n    getForecast.fiveDaysThreeHours.byCity(address.city).then(data => {\r\n      // Get today or tomorrow forecast at noon\r\n      todayForecast.current =\r\n        data.results.list.filter(\r\n          data =>\r\n            moment(data.dt_txt).calendar(null, {\r\n              sameDay: '[Today]',\r\n              nextDay: '[Tomorrow]',\r\n              nextWeek: 'dddd',\r\n              lastDay: '[Yesterday]',\r\n              lastWeek: '[Last] dddd',\r\n              sameElse: 'DD/MM/YYYY',\r\n            }) === 'Today' && moment(data.dt_txt).get('hour') === 12\r\n        )[0] ??\r\n        data.results.list.filter(\r\n          data =>\r\n            moment(data.dt_txt).calendar(null, {\r\n              sameDay: '[Today]',\r\n              nextDay: '[Tomorrow]',\r\n              nextWeek: 'dddd',\r\n              lastDay: '[Yesterday]',\r\n              lastWeek: '[Last] dddd',\r\n              sameElse: 'DD/MM/YYYY',\r\n            }) === 'Tomorrow' && moment(data.dt_txt).get('hour') === 12\r\n        )[0];\r\n      setForecast(data);\r\n    });\r\n\r\n    // Gets data from Unsplash API using a City as the query\r\n    searchPhotosByKeyword(address.city, {\r\n      backupSearch: true,\r\n      backupKeyword:\r\n        address.country.length > 3 ? address.country : address.country_name,\r\n    }).then(({ response: { data } }) => {\r\n      const imageUrls =\r\n        data.results[getRandomNumber(data.results.length)]?.urls;\r\n      setCardBgUrl(imageUrls?.small);\r\n    });\r\n  }, [address]);\r\n\r\n  // -- Click Handlers\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  const handleFavoriteClick = () => {\r\n    setIsFavorite(!isFavorite);\r\n\r\n    if (!isFavorite) {\r\n      addAddressToFavorites(address);\r\n    } else {\r\n      removeAddressFromFavorites(address);\r\n    }\r\n  };\r\n\r\n  // const fullDate = new Date(data.dt_txt);\r\n  return forecast && todayForecast ? (\r\n    <Grid\r\n      wrap='nowrap'\r\n      container\r\n      justifyContent='center'\r\n      className={classes.root}\r\n    >\r\n      {/* Main Data Container */}\r\n      <Grid container item xs={10} sm={5} md={6}>\r\n        <Card className={classes.card} raised>\r\n          {/* Overlay */}\r\n          <div className={classes.cardOverlay}></div>\r\n          {/* Header */}\r\n          <CardHeader\r\n            classes={{\r\n              action: classes.cardHeaderAction,\r\n            }}\r\n            action={\r\n              <Grid\r\n                container\r\n                justifyContent='center'\r\n                // alignItems='flex-start'\r\n                direction='column'\r\n                wrap='nowrap'\r\n              >\r\n                <IconButton\r\n                  aria-label='Toggle from favorite'\r\n                  onClick={handleFavoriteClick}\r\n                  className={classes.favoriteButton}\r\n                >\r\n                  {isFavorite ? (\r\n                    <Favorite style={{ color: 'white' }} />\r\n                  ) : (\r\n                    <FavoriteBorder style={{ color: 'white' }} />\r\n                  )}\r\n                </IconButton>\r\n                <IconButton\r\n                  aria-label='Toggle from favorite'\r\n                  onClick={() => removeAddress(address)}\r\n                  className={classes.closeButton}\r\n                >\r\n                  <Close style={{ color: 'white' }} />\r\n                </IconButton>\r\n              </Grid>\r\n            }\r\n            title={todayForecast.current.weather[0].main}\r\n            titleTypographyProps={{\r\n              variant: 'h2',\r\n              component: 'h3',\r\n              className: classes.cardTitle,\r\n            }}\r\n            subheader={moment(todayForecast.current.dt_txt).format(\r\n              'DD/MM/YYYY'\r\n            )}\r\n            subheaderTypographyProps={{\r\n              variant: 'subtitle2',\r\n              className: classes.cardSubtitle,\r\n            }}\r\n          />\r\n\r\n          {/* Body */}\r\n          <CardContent className={classes.cardContent}></CardContent>\r\n          {/* Footer */}\r\n          <CardActions className={classes.cardActions}>\r\n            <Typography\r\n              variant='body1'\r\n              className={classes.cardActionsTitle}\r\n              noWrap\r\n              align='left'\r\n            >\r\n              {capitalizeFirstLetter(address.city.toLowerCase())},{' '}\r\n              {capitalizeFirstLetter(address.country_code.toLowerCase())}\r\n            </Typography>\r\n            <IconButton\r\n              className={`${clsx(classes.expand, {\r\n                [classes.expandOpen]: expanded,\r\n              })} ${classes.cardActionsIcon}`}\r\n              onClick={handleExpandClick}\r\n              aria-expanded={expanded}\r\n              aria-label='show more'\r\n            >\r\n              <ExpandMore style={{ color: 'white' }} />\r\n            </IconButton>\r\n          </CardActions>\r\n        </Card>\r\n      </Grid>\r\n      {/* More Data Container */}\r\n      <Collapse\r\n        in={expanded}\r\n        timeout='auto'\r\n        orientation='horizontal'\r\n        unmountOnExit\r\n        // Utilizing MUI Grid classes instead of a Grid for a better Transition UX\r\n        className={classes.collapse}\r\n        classes={{\r\n          wrapperInner: classes.collapseWrapperInner,\r\n        }}\r\n      >\r\n        <Paper className={classes.moreData} elevation={3}>\r\n          {/* Data */}\r\n          <Grid\r\n            container\r\n            justifyContent='space-evenly'\r\n            alignItems='center'\r\n            style={{ height: 'calc(100% - 110px)' }}\r\n          >\r\n            {/* Left */}\r\n            <Hidden xsDown>\r\n              <Grid\r\n                container\r\n                item\r\n                sm={7}\r\n                justifyContent='center'\r\n                style={{\r\n                  height: '100%',\r\n                }}\r\n              >\r\n                <img\r\n                  src={getWeatherConditionIcon(\r\n                    todayForecast.current.weather[0].main,\r\n                    todayForecast.current.weather[0].id,\r\n                    todayForecast.current.dt_txt\r\n                  )}\r\n                  height='150px'\r\n                  width='150px'\r\n                  alt='weather icon'\r\n                  style={{\r\n                    marginTop: '-20px',\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Hidden>\r\n            {/* Right */}\r\n            <Grid\r\n              container\r\n              item\r\n              xs={12}\r\n              sm={5}\r\n              direction='column'\r\n              justifyContent='center'\r\n              className={classes.moreDataRightSide}\r\n            >\r\n              <Typography align='justify' variant='body2' noWrap>\r\n                {Math.round(\r\n                  convertFarenheitToCelcius(todayForecast.current.main.temp)\r\n                )}\r\n                ℃ | {Math.round(todayForecast.current.main.temp)}℉\r\n              </Typography>\r\n              <Typography align='justify' variant='body2' noWrap>\r\n                Feels like: {Math.round(todayForecast.current.main.feels_like)}\r\n                °F\r\n              </Typography>\r\n              <Typography align='justify' variant='body2' noWrap>\r\n                Wind: {todayForecast.current.wind.speed} mph\r\n              </Typography>\r\n              <Typography align='justify' variant='body2' noWrap>\r\n                Humidity: {todayForecast.current.main.humidity}%\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* Carousel */}\r\n          <TimelineCarousel className={classes.timelineCarousel} height='110px'>\r\n            {forecast.results.list.map((value, i) => (\r\n              <WeatherTimeline key={i} data={value} />\r\n            ))}\r\n          </TimelineCarousel>\r\n        </Paper>\r\n      </Collapse>\r\n    </Grid>\r\n  ) : null;\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addAddressToFavorites: address => dispatch(addAddressToFavorites(address)),\r\n  removeAddressFromFavorites: address =>\r\n    dispatch(removeAddressFromFavorites(address)),\r\n  removeAddress: address => dispatch(removeAddress(address)),\r\n});\r\n\r\nexport default React.memo(connect(null, mapDispatchToProps)(ForecastCard));\r\n","import React from 'react';\r\n\r\n// * Libraries\r\n// + Material-UI\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\n// + React~Redux\r\nimport { connect } from 'react-redux';\r\n// + Reselect\r\nimport { createStructuredSelector } from 'reselect';\r\nimport {\r\n  selectFavoriteAddresses,\r\n  selectSearchedAddresses,\r\n} from '../../redux/address/address.selectors';\r\n\r\n// * Components\r\nimport ForecastCard from '../forecast-card/forecast-card.component';\r\n\r\n// -- Material-UI Styles\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    maxWidth: '100%', // So it doesn't overflow,\r\n    // Overriding Material default style for grid\r\n    margin: '0 0 2rem',\r\n  },\r\n});\r\n\r\nconst ForecastCardsOverview = ({ searchedAddresses, favoriteAddresses }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={2}\r\n      justifyContent='center'\r\n      alignItems='center'\r\n      className={classes.container}\r\n    >\r\n      {favoriteAddresses.length\r\n        ? favoriteAddresses.map((address, idx) => (\r\n            // Wrapper for the Cards. Should use one per Card\r\n            <Grid\r\n              key={address.place_id ?? idx}\r\n              container\r\n              item\r\n              xs={12}\r\n              md={6}\r\n              lg={5}\r\n              justifyContent='center'\r\n            >\r\n              <ForecastCard address={address} favorite/>\r\n            </Grid>\r\n          ))\r\n        : null}\r\n      {searchedAddresses.length\r\n        ? searchedAddresses.map((address, idx) => (\r\n            // Wrapper for the Cards. Should use one per Card\r\n            <Grid\r\n              key={address.place_id ?? idx}\r\n              container\r\n              item\r\n              xs={12}\r\n              md={6}\r\n              lg={5}\r\n              justifyContent='center'\r\n            >\r\n              <ForecastCard address={address} />\r\n            </Grid>\r\n          ))\r\n        : null}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  searchedAddresses: selectSearchedAddresses,\r\n  favoriteAddresses: selectFavoriteAddresses,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ForecastCardsOverview);\r\n","// * Libraries\r\n// + Axios\r\nimport axios from 'axios';\r\n// + Environment Variables\r\nimport env from 'react-dotenv';\r\n\r\nconst BASE_URL = `https://api.geoapify.com/v1/geocode`;\r\n\r\nexport const autocompleteAddress = {\r\n  byCity: async (cityName, cancelToken) => {\r\n    try {\r\n      const data = await axios(\r\n        {\r\n          method: 'GET',\r\n          url: `${BASE_URL}/autocomplete`,\r\n          params: {\r\n            apiKey: env.GEOAPIFY_API_KEY,\r\n            text: cityName,\r\n            type: 'city',\r\n            limit: '5',\r\n          },\r\n        },\r\n        // Pass the cancel token to the current request\r\n        { cancelToken: cancelToken.token }\r\n      );\r\n      return { results: data };\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  byState: async (stateName, cancelToken) => {\r\n    try {\r\n      const data = await axios(\r\n        {\r\n          method: 'GET',\r\n          url: `${BASE_URL}/autocomplete`,\r\n          params: {\r\n            apiKey: env.GEOAPIFY_API_KEY,\r\n            text: stateName,\r\n            type: 'city',\r\n            limit: '5',\r\n          },\r\n        },\r\n        // Pass the cancel token to the current request\r\n        { cancelToken: cancelToken.token }\r\n      );\r\n      return { results: data };\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  byCountry: async (countryName, cancelToken) => {\r\n    try {\r\n      const data = await axios(\r\n        {\r\n          method: 'GET',\r\n          url: `${BASE_URL}/autocomplete`,\r\n          params: {\r\n            apiKey: env.GEOAPIFY_API_KEY,\r\n            text: countryName,\r\n            type: 'city',\r\n            limit: '5',\r\n          },\r\n        },\r\n        // Pass the cancel token to the current request\r\n        { cancelToken: cancelToken.token }\r\n      );\r\n      return { results: data };\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n","import React from 'react';\r\n\r\n// * Libraries\r\n// + Material-UI Components\r\nimport {\r\n  Container,\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core';\r\n// + Material-UI Colors\r\nimport { red } from '@material-ui/core/colors';\r\n// + Material-UI Icons Library\r\nimport { SearchOutlined, LocationOn } from '@material-ui/icons';\r\n// + Axios\r\nimport axios from 'axios';\r\n\r\n// + Redux\r\nimport { connect } from 'react-redux';\r\nimport { addAddressToSearchedAddresses } from '../../redux/address/address.actions';\r\n\r\nconst useStyles = makeStyles({\r\n  searchbar: {\r\n    padding: '1rem 0',\r\n    width: '100%',\r\n    'border-radius': '1.75rem',\r\n    '& > *': {\r\n      background: 'white',\r\n      padding: '9px!important', // Overrides inputRoot padding\r\n      'border-radius': 'inherit',\r\n    },\r\n\r\n    // ! Remove Default X icon from Google Chrome\r\n    '& input[type=\"search\"]::-webkit-search-decoration': {\r\n      display: 'none',\r\n    },\r\n    '& input[type=\"search\"]::-webkit-search-cancel-button': {\r\n      display: 'none',\r\n    },\r\n    '& input[type=\"search\"]::-webkit-search-results-button': {\r\n      display: 'none',\r\n    },\r\n    '& input[type=\"search\"]::-webkit-search-results-decoration': {\r\n      display: 'none',\r\n    },\r\n  },\r\n  locationIcon: {\r\n    color: red[700],\r\n  },\r\n});\r\n\r\nconst getUserGeoLocation = async () => {\r\n  // ! Is promise function which will return the userLocation\r\n  // if (!('geolocation' in navigator)) {\r\n  //   return 'Geolocation is not available on this device';\r\n  // }\r\n  // const askUserLocation = () =>\r\n  // // * It's a promise so we can get the value in other sections of the code\r\n  //   new Promise((res, rej) => {\r\n  //     navigator.geolocation.getCurrentPosition(res, rej);\r\n  //   });\r\n  // const userLocation = await askUserLocation();\r\n  // return userLocation;\r\n\r\n  // More data than navigator\r\n  return await axios.get('https://ipapi.co/json');\r\n};\r\n\r\nconst SearchBar = ({ addAddressToSearchedAddresses, ...props }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container maxWidth='sm'>\r\n      <TextField\r\n        {...props}\r\n        className={classes.searchbar}\r\n        id='searchbar'\r\n        type='search'\r\n        placeholder='Search by city'\r\n        variant='outlined'\r\n        inputProps={{\r\n          ...props.inputProps,\r\n          autoComplete: 'off',\r\n        }}\r\n        InputProps={{\r\n          ...props.InputProps,\r\n          startAdornment: (\r\n            <InputAdornment\r\n              position='end'\r\n              disablePointerEvents\r\n              style={{ margin: '0 .75rem' }}\r\n            >\r\n              {/* Search Icon - Button Less */}\r\n              <SearchOutlined />\r\n            </InputAdornment>\r\n          ),\r\n          endAdornment: (\r\n            <InputAdornment position='end'>\r\n              {/* Get Icons from Material Autocomplete Library */}\r\n              {props?.InputProps?.endAdornment?.props?.children}\r\n\r\n              {/* Location Icon */}\r\n              <IconButton\r\n                onClick={() =>\r\n                  getUserGeoLocation().then(({ data }) =>\r\n                    addAddressToSearchedAddresses(data)\r\n                  )\r\n                }\r\n              >\r\n                <LocationOn className={classes.locationIcon} />\r\n              </IconButton>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addAddressToSearchedAddresses: data =>\r\n    dispatch(addAddressToSearchedAddresses(data)),\r\n});\r\n\r\nexport default React.memo(connect(null, mapDispatchToProps)(SearchBar));\r\n","import React from 'react';\r\n\r\n// * Libraries\r\n// + Material-UI\r\nimport { Grid, Typography, makeStyles } from '@material-ui/core';\r\n// + Material-UI Lab\r\nimport { Autocomplete } from '@material-ui/lab';\r\n// + Material-UI Icons\r\nimport { LocationOn } from '@material-ui/icons';\r\n// + Autosuggest Highlight\r\nimport match from 'autosuggest-highlight/match';\r\nimport parse from 'autosuggest-highlight/parse';\r\n// + Axios\r\nimport axios from 'axios';\r\n\r\n// + Redux\r\nimport { connect } from 'react-redux';\r\nimport { addAddressToSearchedAddresses } from '../../redux/address/address.actions';\r\n\r\n// * Components\r\n// + API\r\nimport { autocompleteAddress } from '../../API/geoapify/geoapify.api';\r\n// + Utils\r\nimport SearchBar from '../searchbar/searchbar.component';\r\n\r\n// -- Material Styles\r\nconst useStyles = makeStyles(theme => ({\r\n  optionsIcon: {\r\n    color: theme.palette.text.secondary,\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  optionsWrapper: {\r\n    borderRadius: '1rem!important',\r\n    // Slight disminuition of the width for a better aesthethic\r\n    marginLeft: '.25rem',\r\n    marginRight: '.25rem',\r\n  },\r\n}));\r\n\r\nconst AutocompleteSearchbar = ({ addAddressToSearchedAddresses }) => {\r\n  // Data from API\r\n  const value = null;\r\n  // Data from Input\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [open, setOpen] = React.useState(false);\r\n  const [options, setOptions] = React.useState([]);\r\n  const loading = open && options.length === 0 && inputValue.length >= 3;\r\n  const fetchOptionsCancelToken = React.useRef(undefined);\r\n\r\n  // -- Material Styles Instance\r\n  const classes = useStyles();\r\n\r\n  const fetchOptions = React.useMemo(\r\n    () => cityName => {\r\n      // -- Axios Cancelling - cancel previous unfinished requests\r\n\r\n      // Check if there are any previous pending requests\r\n      if (typeof fetchOptionsCancelToken.current != typeof undefined) {\r\n        fetchOptionsCancelToken.current.cancel(\r\n          'Operation canceled due to new request.'\r\n        );\r\n      }\r\n\r\n      // Save the cancel token for the current request\r\n      fetchOptionsCancelToken.current = axios.CancelToken.source();\r\n\r\n      return autocompleteAddress.byCity(\r\n        cityName,\r\n        fetchOptionsCancelToken.current\r\n      );\r\n    },\r\n    []\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    let active = true;\r\n\r\n    if (inputValue === '') {\r\n      setOptions(value ? [value] : []);\r\n      return undefined;\r\n    }\r\n\r\n    fetchOptions(inputValue).then(({ results }) => {\r\n      if (active) {\r\n        let newOptions = [];\r\n\r\n        if (value) {\r\n          newOptions = [value];\r\n        }\r\n\r\n        if (results.data.features) {\r\n          newOptions = [\r\n            ...newOptions,\r\n            // Taking only relevant data (properties)\r\n            ...results.data.features.map(feature => feature.properties),\r\n          ];\r\n        }\r\n\r\n        setOptions(newOptions);\r\n      }\r\n    });\r\n\r\n    // Stops memory leak\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [inputValue, value, fetchOptions]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id='city-searchbar'\r\n      popupIcon={null}\r\n      open={open}\r\n      value={value}\r\n      filterSelectedOptions\r\n      onChange={(event, newAddress) => {\r\n        setOptions(newAddress ? [newAddress, ...options] : options);\r\n        addAddressToSearchedAddresses(newAddress);\r\n      }}\r\n      onInputChange={(event, newInputValue) => {\r\n        setInputValue(newInputValue);\r\n      }}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      getOptionLabel={option => {\r\n        return `${option.city}, ${\r\n          option.state\r\n        }, ${option.country_code.toUpperCase()}`;\r\n      }}\r\n      options={options}\r\n      loading={loading}\r\n      classes={{\r\n        paper: classes.optionsWrapper,\r\n      }}\r\n      renderInput={params => <SearchBar {...params} />}\r\n      renderOption={option => {\r\n        const optionCustomAddress =\r\n          option.city +\r\n          ', ' +\r\n          option.state +\r\n          ', ' +\r\n          option.country_code.toUpperCase();\r\n        const matches = match(optionCustomAddress, inputValue);\r\n        const parts = parse(optionCustomAddress, matches);\r\n        return (\r\n          <Grid container alignItems='center'>\r\n            <Grid item>\r\n              <LocationOn className={classes.optionsIcon} />\r\n            </Grid>\r\n            <Grid item xs>\r\n              {parts.map((part, index) => (\r\n                <span\r\n                  key={index}\r\n                  style={{ fontWeight: part.highlight ? 700 : 400 }}\r\n                >\r\n                  {part.text}\r\n                </span>\r\n              ))}\r\n\r\n              <Typography variant='body2' color='textSecondary'>\r\n                {option.formatted}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addAddressToSearchedAddresses: data =>\r\n    dispatch(addAddressToSearchedAddresses(data)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(AutocompleteSearchbar);\r\n","import React from 'react';\r\n\r\n// * Libraries\r\n// + Material-UI\r\nimport { Container, makeStyles } from '@material-ui/core';\r\n\r\n// * Components\r\nimport AutocompleteSearchbar from '../autocomplete-searchbar/autocomplete-searchbar.component';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    background: '#3a3a3a',\r\n    boxShadow:\r\n      '0px 3px 3px -2px rgb(0 0 0 / 20%), 0px 3px 4px 0px rgb(0 0 0 / 14%), 0px 1px 8px 0px rgb(0 0 0 / 12%)',\r\n    marginBottom: '2rem',\r\n  },\r\n}));\r\n\r\nconst Header = props => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Container className={classes.container} maxWidth={false}>\r\n      <AutocompleteSearchbar {...props} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default React.memo(Header);\r\n","import React from 'react';\r\n\r\n// * Libraries\r\n// + Material-UI\r\nimport { Container, Link, makeStyles, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    marginTop: 'auto',\r\n    background: '#3a3a3a',\r\n    height: '70px',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    boxShadow:\r\n      '0px -3px 3px -2px rgb(0 0 0 / 20%), 0px -3px 4px 0px rgb(0 0 0 / 14%), 0px -1px 8px 0px rgb(0 0 0 / 12%)',\r\n  },\r\n  typography: {\r\n    color: 'white',\r\n    fontSize: '1rem',\r\n  },\r\n  heartIcon: {\r\n    color: 'red',\r\n  },\r\n}));\r\n\r\nconst Footer = props => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Container className={classes.container} maxWidth={false}>\r\n      <Typography align='center' variant='h4' className={classes.typography}>\r\n        Made with <span className={classes.heartIcon}>❤</span> by{' '}\r\n        <Link\r\n          color='inherit'\r\n          href={process.env.REACT_APP_GITHUB_ACCOUNT}\r\n          target='_blank'\r\n          rel='noopener'\r\n        >\r\n          Fred Zerpa\r\n        </Link>\r\n      </Typography>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default React.memo(Footer);\r\n","import React from 'react';\r\n\r\n// CSS\r\nimport './App.css';\r\n\r\n// * Libraries\r\n// + Material-UI\r\nimport { Grid, makeStyles } from '@material-ui/core';\r\n\r\n// * Components\r\nimport ForecastCardsOverview from './components/forecast-cards-overview/forecast-cards-overview.component';\r\nimport GithubCorner from 'react-github-corner';\r\nimport Header from './components/header/header.component';\r\nimport Footer from './components/footer/footer.component';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    minHeight: '100vh',\r\n    background: `#181818`,\r\n  },\r\n  githubCorner: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      // Not shown on small devices\r\n      display: 'none',\r\n    },\r\n  },\r\n}));\r\n\r\nconst App = () => {\r\n  // -- Material Style\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid\r\n      className={classes.root}\r\n      container\r\n      direction='column'\r\n      justifyContent='center'\r\n    >\r\n      <Header />\r\n      <ForecastCardsOverview />\r\n      <GithubCorner\r\n        className={classes.githubCorner}\r\n        bannerColor='#fff'\r\n        octoColor='#000'\r\n        href={process.env.REACT_APP_GITHUB_REPO}\r\n      />\r\n      <Footer />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// * Libraries\r\n// + React-Redux\r\nimport { Provider } from 'react-redux';\r\nimport { store, persistor } from './redux/store';\r\n// + Redux-Persist\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\n// * Components\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <PersistGate persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}